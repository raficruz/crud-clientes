swagger: "2.0"
info:
  description: "Customers Crud"
  version: "1.0.0"
  title: "Customers Crud"
  contact:
    email: "raficruz@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/v1"
tags:
- name: "cliente"
  description: "Everything about your customers"

schemes:
- "https"
- "http"
paths:
  /clientes:
    post:
      tags:
      - "cliente"
      summary: "Add a new customer to the store"
      description: ""
      operationId: "addCustomer"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Customer object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/CustomerDTO"
      responses:
        "201":
          description: "Criado"
        "204":
          description: "Não encontrado"
        "409":
          description: "Dados obrigatórios e inválidos"
    get:
      tags:
      - "cliente"
      summary: "Finds all clients by filters"
      description: "Multiple parameters can be provided to find customers"
      operationId: "findAll"
      produces:
      - "application/json"
      parameters:
      - name: "nome"
        in: "query"
        description: "Customer Name"
        type: "string"
        maxLength: 40
        required: false
      - name: "nascimento"
        in: "query"
        type: "string"
        format: date
      - name: "cpf"
        in: "query"
        type: "string"
        maxLength: 11
      - name: "sexo"
        in: "query"
        type: "string"
        collectionFormat: "multi"
        enum: 
          - M
          - F
      - name: "page"
        in: "query"
        description: "Customer Name"
        type: "integer"
        required: false
        default: 0
      - name: "size"
        in: "query"
        description: "Customer Name"
        type: "integer"
        required: false
        default: 10
      - name: "sort"
        in: "query"
        type: "string"
        default: ASC
        collectionFormat: "multi"
        enum: 
          - ASC
          - DESC
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Customer"
        "204":
          description: "Não encontrado"
        "409":
          description: "Invalid status value"
  /clientes/{clienteId}:
    get:
      tags:
      - "cliente"
      summary: "Find customer by CPF"
      description: "Returns a single customer"
      operationId: "getCustomerByCPF"
      produces:
      - "application/json"
      parameters:
      - name: "clienteId"
        in: "path"
        description: "Customer's CPF"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Customer"
        "204":
          description: "Não encontrado"
        "409":
          description: "Invalid status value"
    delete:
      tags:
      - "cliente"
      summary: "Deletes a customer"
      description: ""
      operationId: "deleteCustomer"
      produces:
      - "application/json"
      parameters:
      - name: "clienteId"
        in: "path"
        description: "customer id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
        "409":
          description: "Invalid ID supplied or Customer not found"
    put:
      tags:
      - "cliente"
      summary: "Update an existing customer"
      description: ""
      operationId: "updateCustomer"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clienteId"
        in: "path"
        description: "customer id to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Customer object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/CustomerDTO"
      responses:
        "200":
          description: "Atualizado"
        "409":
          description: "Não encontrado"
definitions:
  Customer:
    type: "object"
    required:
    - "nome"
    - "nascimento"
    - "cpf"
    - "sexo"
    properties:
      id:
        type: "integer"
        format: "int64"
      nome:
        type: "string"
        maxLength: 40
        example: "Rafael Cruz"
      nascimento:
        type: "string"
        format: date
        example: "01/01/1971"
      cpf:
        type: "string"
        maxLength: 11
        example: "12345678901"
      sexo:
        type: "string"
        example: "M"
        enum: 
          - M
          - F
  CustomerDTO:
    type: "object"
    properties:
      nome:
        type: "string"
        maxLength: 40
        example: "Rafael Cruz"
      nascimento:
        type: "string"
        format: date
        example: "01/01/1971"
      cpf:
        type: "string"
        maxLength: 11
        example: "12345678901"
      sexo:
        type: "string"
        example: "M"
        enum: 
          - M
          - F